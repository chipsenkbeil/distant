name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  clippy:
    name: "Lint with clippy (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: windows-latest }
          - { os: ubuntu-latest }
    env:
      RUSTFLAGS: -Dwarnings
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust (clippy)
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
      - uses: Swatinem/rust-cache@v1
      - name: Check Cargo availability
        run: cargo --version
      - name: distant-core (all features)
        run: cargo clippy -p distant-core --all-targets --verbose --all-features
      - name: distant-ssh2 (all features)
        run: cargo clippy -p distant-ssh2 --all-targets --verbose --all-features
      - name: distant (all features)
        run: cargo clippy --all-targets --verbose --all-features
  rustfmt:
    name: "Verify code formatting (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: windows-latest }
          - { os: ubuntu-latest }
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust (rustfmt)
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
      - uses: Swatinem/rust-cache@v1
      - name: Check Cargo availability
        run: cargo --version
      - run: cargo fmt --all -- --check
  tests:
    name: "Test Rust ${{ matrix.rust }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { rust: stable, os: windows-latest, target: x86_64-pc-windows-msvc }
          - { rust: stable, os: macos-latest }
          - { rust: stable, os: ubuntu-latest }
          - { rust: 1.59.0, os: ubuntu-latest }
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v1
      - name: Check Cargo availability
        run: cargo --version
      - uses: Vampire/setup-wsl@v1
        if: matrix.os == 'windows-latest'
      - name: Run net tests (default features)
        run: cargo test --release --verbose -p distant-net
      - name: Run core tests (default features)
        run: cargo test --release --verbose -p distant-core
      - name: Run core tests (all features)
        run: cargo test --release --verbose --all-features -p distant-core
      - name: Ensure /run/sshd exists on Unix
        run: mkdir -p /run/sshd
      - name: Run ssh2 client tests (default features)
        run: cargo test --release --verbose -p distant-ssh2 ssh2::client
      - name: Run ssh2 client tests (all features)
        run: cargo test --release --verbose --all-features -p distant-ssh2 ssh2::client
      - name: Run CLI tests
        run: cargo test --release --verbose
        shell: bash
      - name: Run CLI tests (no default features)
        run: cargo test --release --verbose --no-default-features
        shell: bash
  ssh-launch-tests:
    name: "Test ssh launch using Rust ${{ matrix.rust }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { rust: stable, os: macos-latest }
          - { rust: stable, os: ubuntu-latest }
          - { rust: 1.59.0, os: ubuntu-latest }
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
      - uses: Swatinem/rust-cache@v1
      - name: Check Cargo availability
        run: cargo --version
      - name: Install distant cli for use in launch tests
        run: |
          cargo install --path .
          echo "DISTANT_PATH=$HOME/.cargo/bin/distant" >> $GITHUB_ENV
      - name: Run ssh2 launch tests (default features)
        run: cargo test --release --verbose -p distant-ssh2 ssh2::launched
      - name: Run ssh2 launch tests (all features)
        run: cargo test --release --verbose --all-features -p distant-ssh2 ssh2::launched
